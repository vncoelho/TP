// ===================================
// Main.cpp file generated by OptFrame
// Project TP
// ===================================

//extern int PRINTING_LEVEL = 2;
// ALLOW SPECIFIC COMPILATION VALUE WITH -DPRINTING_LEVEL=2 GCC FLAG
#ifndef PRINTING_LEVEL
#define PRINTING_LEVEL 2
#endif

#include <stdlib.h>
#include <math.h>
#include <iostream>

// LOADER IS NOT DEFAULT ANYMORE. USE ONLY IF YOU NEED...
//#include "../OptFrame/Loader.hpp"

#include "TP.h"

#include "./TP/Representation.h"
#include "./TP/Solution.h"
#include "./TP/Evaluation.h"
#include "./TP/Evaluator.h"

using namespace std;
using namespace optframe;
using namespace TP;

int main(int argc, char **argv)
{
	RandGen rg;
	long seed = time(NULL);
	seed = 10;
	cout << "Seed = " << seed << endl;
	rg.setSeed(seed);

	cout << "creating problem instance" << endl;
	ProblemInstance p;
	cout << "problem instance ok " << endl;

	int nodeMaxChildren = 5;
	int treeMaxDepth = 3;
	ConstructiveRandom c(p, rg, nodeMaxChildren, treeMaxDepth);

	Solution<RepTP>& sol = c.generateSolution();
	cout << "solucao gerada com sucesso!" << endl;
	TPEvaluator eval(p);
	Evaluation& e = eval.evaluate(sol.getR());
	cout << e.evaluation();

	delete& sol;
	delete& e;

	// Initialize here all your OptFrame components
	// (ProblemInstance, Evaluator, Constructive, ...)

	cout << "PROGRAMM ended successfully" << endl;

	return 0;
}
